<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 胡思乱</title>
    <link>https://gaoxin19.github.io/post/</link>
    <description>Recent content in Posts on 胡思乱</description>
    <generator>Hugo -- 0.150.0</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 24 Sep 2025 13:54:54 +0800</lastBuildDate>
    <atom:link href="https://gaoxin19.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>订阅10个月后，和Cursor说再见</title>
      <link>https://gaoxin19.github.io/post/cursor-unsubscribe-10-months/</link>
      <pubDate>Wed, 24 Sep 2025 13:54:54 +0800</pubDate>
      <guid>https://gaoxin19.github.io/post/cursor-unsubscribe-10-months/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;AI时代, 用户忠诚度为零&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;随着越来越多 AI 工具的出现，在日常使用 Cursor 时，真正依赖的功能只剩下 &lt;strong&gt;Tab 补全&lt;/strong&gt; 和 &lt;strong&gt;项目总结&lt;/strong&gt;。因此，在使用 10 个月后，我决定退订。&lt;/p&gt;
&lt;p&gt;最初接触 Cursor 是去年，通过 X 上的讨论和同事的推荐。当时我一直在用 VSCode，配合 GitHub Copilot。抱着好奇心，我立刻注册了 Cursor 并体验了一段时间。Cursor确实是划时代的产品，试用期结束后，直接续订了月付，没有选择更优惠的年付方案，相信 AI 工具会高速迭代，保持灵活性更重要。&lt;/p&gt;</description>
    </item>
    <item>
      <title>从笛卡尔积看 SQL JOIN 性能</title>
      <link>https://gaoxin19.github.io/post/from-cartesian-product-sql-join-performance/</link>
      <pubDate>Thu, 21 Aug 2025 12:10:38 +0800</pubDate>
      <guid>https://gaoxin19.github.io/post/from-cartesian-product-sql-join-performance/</guid>
      <description>&lt;h3 id=&#34;1-join的统一模型笛卡尔积与过滤&#34;&gt;&lt;strong&gt;1. JOIN的统一模型：笛卡尔积与过滤&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;要理解任何 &lt;code&gt;JOIN&lt;/code&gt; 的性能，必须回归其最根本的数学模型。无论是 &lt;code&gt;INNER JOIN&lt;/code&gt; 还是 &lt;code&gt;OUTER JOIN&lt;/code&gt;，其逻辑上都可以分解为以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;生成组合 (Combination)&lt;/strong&gt;：计算两张表的笛卡尔积（Cartesian Product），即 &lt;code&gt;表A行数 × 表B行数&lt;/code&gt; 的全量组合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用条件 (Filtering)&lt;/strong&gt;：使用 &lt;code&gt;ON&lt;/code&gt; 子句作为过滤器，在全量组合中筛选出满足条件的行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;补充数据 (Augmentation - 仅外连接)&lt;/strong&gt;：对于 &lt;code&gt;OUTER JOIN&lt;/code&gt;，需要将“保留表”（如 &lt;code&gt;LEFT JOIN&lt;/code&gt; 中的左表）中未能匹配的行补充回来，并将另一表的字段填充为 &lt;code&gt;NULL&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个模型可以用以下流程图来概念化：&lt;/p&gt;</description>
    </item>
    <item>
      <title>跨域问题记录</title>
      <link>https://gaoxin19.github.io/post/cors_problems/</link>
      <pubDate>Tue, 18 Jul 2023 21:01:00 +0800</pubDate>
      <guid>https://gaoxin19.github.io/post/cors_problems/</guid>
      <description>&lt;p&gt;记录跨域问题的原因，并展示如何使用 Nginx 的配置来解决这些问题&lt;/p&gt;
&lt;p&gt;什么是跨源资源共享（CORS）？
跨源资源共享（CORS）是一种浏览器安全策略，用于限制来自不同域的 Web 应用程序对当前域中资源的访问。想要深入了解 CORS，请查阅&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS&#34;&gt;MDN Web 文档&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>圆周运动动画</title>
      <link>https://gaoxin19.github.io/post/circle_animation/</link>
      <pubDate>Sun, 23 Oct 2022 20:37:59 +0800</pubDate>
      <guid>https://gaoxin19.github.io/post/circle_animation/</guid>
      <description>&lt;h3 id=&#34;数学定义&#34;&gt;数学定义&lt;/h3&gt;
&lt;p&gt;众所周知，&lt;strong&gt;三点确定一个圆&lt;/strong&gt;，通过在圆上的任意三点可以解出圆的方程，当我们解出方程，一般会得到数学中常见的一般式方程：&lt;/p&gt;
&lt;p&gt;$$x^2+y^2+Dx+Ey+F=r^2$$&lt;/p&gt;
&lt;p&gt;本质上我们也得到了圆心和半径（可能并不那么容易）&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用Hugo建立博客</title>
      <link>https://gaoxin19.github.io/post/blog_with_hugo/</link>
      <pubDate>Tue, 20 Sep 2022 12:18:38 +0800</pubDate>
      <guid>https://gaoxin19.github.io/post/blog_with_hugo/</guid>
      <description>&lt;p&gt;Hugo是一个用Go语言编写的静态网站生成器，想了解&lt;code&gt;Hugo&lt;/code&gt;可以&lt;a href=&#34;https://gohugo.io/&#34;&gt;前往官网&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这次使用Hugo来写博客，并发布到github pages，之前就用&lt;code&gt;Jekyll&lt;/code&gt;搞过一次（没写起来）。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
